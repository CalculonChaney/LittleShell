#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/wait.h>


#define MAX_LINE 80 /* 80 chars per line, per command, should be enough. */
int place =1;


/**
 * setup() reads in the next command line, separating it into distinct tokens
 * using whitespace as delimiters. setup() sets the args parameter as a
 * null-terminated string.
 */

void setup(char inputBuffer[], char *args[],int *background)
{
    int length, /* # of characters in the command line */
        i,      /* loop index for accessing inputBuffer array */
        start,  /* index where beginning of next command parameter is */
        ct;     /* index of where to place the next parameter into args[] */
   
    ct = 0;

    /* read what the user enters on the command line */
    length = read(STDIN_FILENO, inputBuffer, MAX_LINE); 

    start = -1;
    if (length == 0)
        exit(0);            /* ^d was entered, end of user command stream */
    if (length < 0){
        perror("error reading the command");
        exit(-1);           /* terminate with error code of -1 */
    }

    /* examine every character in the inputBuffer */
    for (i=0;i<length;i++) {
        switch (inputBuffer[i]){
          case ' ':
          case '\t' :               /* argument separators */
            if(start != -1){
                    args[ct] = &inputBuffer[start];    /* set up pointer */
                ct++;
            }
            inputBuffer[i] = '\0'; /* add a null char; make a C string */
            start = -1;
            break;
          case '\n':                 /* should be the final char examined */
            if (start != -1){
                    args[ct] = &inputBuffer[start];    
                ct++;
            }
                inputBuffer[i] = '\0';
                args[ct] = NULL; /* no more arguments to this command */
            break;
          default :             /* some other character */
            if (start == -1)
                start = i;
            if (inputBuffer[i] == '&'){
                *background  = 1;
                start = -1;
                inputBuffer[i] = '\0';
            }
          }
     }   
     args[ct] = NULL; /* just in case the input line was > 80 */
}

void yell(char *args[]){
	int i = 1;
	
	while(args[i]) {
		char str[MAX_LINE];
		int j = 0;
		strcpy(str,args[i]);
		while(str[j]) {
			str[j] = toupper(str[j]);
			++j;
		}
		if(i == 1)
			printf("%s",str);
		else
		 printf(" %s", str);
		++i;
	 }
	 printf("\n");
}

void myExit(void){
	char start[256];
	char end[] = " -o pid,ppid,pcpu,pmem,etime,user,command\0";
	int pid = getpid();
	snprintf(start,20,"ps -p %d",pid);
	strcat(start, end);
	system(start);
	exit(0);
}

int forwardCommand(char *args[], int background) {
	int statusCode = 0;
	int status;
	int pid = fork();
	if(pid == 0) {
		statusCode = execvp(args[0],args);
		exit(EXIT_FAILURE);
		++place;
    	printf("mpshell[%d]: ", place);
	}
	else {
		printf("[Child pid = %d, background = ",pid);
		if(background) {
			printf("TRUE\n");
    		int cpid = waitpid(-1,&status, WNOHANG);
    		if(cpid < 0) {
    			perror("waitpid");
    			exit(EXIT_FAILURE);
    		}
		}
		else {
			printf("FALSE\n");
			waitpid(pid, &status,WUNTRACED);
		}
	}
	return statusCode;
}
		
		
void commandInterpreter(char *args[], int background) {
	int i = 0;
	char yelling[] = "yell\0";
	char exiting[] = "exit\0";
	
	if(!strcmp(args[i], yelling))
		yell(args);

	else if (!strcmp(args[i], exiting))
		myExit();
	else
		if(forwardCommand(args, background) == -1) {
			printf("\n");
			while(args[i]) {
				printf("%s ", args[i]);
				++i;
			}
			printf(" is not a valid command\n");
		}
}
	

int main(void)
{
char inputBuffer[MAX_LINE];      /* buffer to hold the command entered */
    int background;              /* equals 1 if a command is followed by '&' */
    char *args[(MAX_LINE/2)+1];  /* command line (of 80) has max of 40 arguments */

 
 	printf("Welcome to mpshell. My PID is %d\n", getpid());
    while (1){            /* Program terminates normally inside setup */
    	background = 0;
   		printf("mpshell[%d]: ", place);
 	    fflush(stdout);
	    setup(inputBuffer,args,&background);       /* get next command */
    	commandInterpreter(args, background);
    	++place;

      /* the steps are:
       (0) if built-in command, handle internally
       (1) if not, fork a child process using fork()
       (2) the child process will invoke execvp()
       (3) if background == 0, the parent will wait,
            otherwise returns to the setup() function. */
    }
    
    
}
